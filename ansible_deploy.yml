---

- hosts: localhost
  become: no
  connection: local
  vars_files:
    - ansible_vars.yml

  tasks:

  - name: Check if ansible_inventory exists (instance already up)
    stat: path=./ansible_inventory
    register: ansible_inventory

  - block:
    - name: Launch instance
      ec2:
        key_name: "{{ key_name }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image_ami }}"
        region: "{{ region }}"
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        assign_public_ip: yes
        wait: true
      register: ec2

    - name: Create a inventory file, will be used in the next run!
      copy: content="cake ansible_host={{ item.public_ip }} ansible_ssh_private_key_file={{ key_file }} ansible_user={{ aws_user }}"
            dest=./ansible_inventory owner={{ your_user }} group={{ your_user }} mode=0755
      with_items: "{{ ec2.instances }}"

    - name: Add new instance to host group
      add_host: hostname={{ item.public_ip }} groupname=cake ansible_ssh_private_key_file={{ key_file }} ansible_user={{ aws_user }}
      with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
      with_items: "{{ ec2.instances }}"
    when: ansible_inventory.stat.exists == False

- name: Configure instance
  hosts: cake
  become: True
  environment:
    APP_ENV: 'production'
  vars:
    user: ubuntu

  tasks:

  - name: Install docker repo key
    apt_key: keyserver=hkp://p80.pool.sks-keyservers.net:80 id=58118E89F3A912897C070ADBF76221572C52609D

  - name: Install docker repo
    apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' state=present

  - name: Update apt repository
    apt: update_cache=yes cache_valid_time=3600

  - name: Install OS packages
    apt: name={{ item }} state=present
    with_items:
      - docker-engine
      - python-pip
      - python3-dev
      - python-dev
      - python-pip
      - libxml2-dev
      - libxslt1-dev
      - zlib1g-dev
      - libffi-dev
      - libssl-dev

  - name: Add user ubuntu to docker group
    user: name={{ user }} groups=docker append=yes

  - name: Install docker-compose
    pip: name=docker-compose state=present

  - name: Clone cake repository
    git: repo=https://github.com/jonatasbaldin/cake.git dest="/home/{{ user }}/cake" ssh_opts="-o StrictHostKeyChecking=no"
    become: no
    tags: github

  - name: Start docker
    service: name=docker state=started enabled=yes

  - name: Run docker-compose commands
    command: "{{ item }}"
    with_items:
      - docker-compose -f docker-compose-production.yml build
      - docker-compose -f docker-compose-production.yml up -d
    args:
      chdir: "/home/{{ user }}/cake/"
    become: no
    tags: compose

  - name: Run django migrate
    command: "{{ item }} "
    with_items:
      - docker-compose -f docker-compose-production.yml run --rm web python manage.py makemigrations
      - docker-compose -f docker-compose-production.yml run --rm web python manage.py migrate
    args:
      chdir: "/home/{{ user }}/cake/"
    become: no
    tags: compose, migrate

  - name: Run first crawl
    command: docker-compose -f docker-compose-production.yml run scrap scrapy crawl cake --set CLOSESPIDER_PAGECOUNT=1000
    args:
      chdir: "/home/{{ user }}/cake/"
    become: no
    tags: compose, crawl

  - name: Install crawler cron job
    cron: name='They see me crawlin, they hatin' user={{ user }} minute="*/15" hour="*" 
          job='docker-compose -f docker-compose-production.yml run scrap scrapy crawl cake --set CLOSESPIDER_PAGECOUNT=100' 
